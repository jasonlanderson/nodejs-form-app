// Generated by CoffeeScript 1.7.1
(function() {
  var Q, Server, TODO_MONGO_LOCAL, TODO_MONGO_SERVICE, URL, appEnv, cfEnv, express, getMongoURL, http, mongoDB, ports, todoDB, tx, utils, _;

  TODO_MONGO_SERVICE = "todo-mongo-db";

  TODO_MONGO_LOCAL = "mongodb://localhost:27017/db";

  URL = require("url");

  http = require("http");

  Q = require("q");

  _ = require("underscore");

  ports = require("ports");

  express = require("express");

  cfEnv = require("cfenv");

  mongoDB = require("./mongo-db");

  tx = require("./tx");

  utils = require("./utils");

  todoDB = null;

  appEnv = cfEnv.getAppEnv({
    name: utils.PROGRAM
  });

  process.on("exit", function(status) {
    return utils.log("process exiting with status " + status);
  });

  exports.start = function(options) {
    var mongoURL, server;
    if (options.verbose) {
      utils.verbose(true);
    }

    utils.log("Using Mongo DB");
    mongoURL = getMongoURL();
    utils.log("using database:  " + mongoURL);
    todoDB = mongoDB.init(mongoURL);
    server = new Server(options);
    return server.start();
  };

  getMongoURL = function() {
    var url;
    url = appEnv.getServiceURL(TODO_MONGO_SERVICE);
    url = url || TODO_MONGO_LOCAL;
    return url;
  };

  Server = (function() {
    function Server(options) {
      if (options == null) {
        options = {};
      }
      if (options.port == null) {
        options.port = appEnv.port;
      }
      if (options.verbose == null) {
        options.verbose = false;
      }
      this.port = options.port, this.verbose = options.verbose;
    }

    Server.prototype.start = function() {
      var app, deferred;
      deferred = Q.defer();
      app = express();
      app.use(express["static"]("www"));
      app.use(express.json());
      app.use(function(req, res, next) {
        req.tx = tx.tx(req, res, todoDB);
        return next();
      });
      app.get("/api/todos", (function(_this) {
        return function(req, res) {
          return req.tx.search();
        };
      })(this));
      app.post("/api/todos", (function(_this) {
        return function(req, res) {
          return req.tx.create();
        };
      })(this));
      app.get("/api/todos/:id", (function(_this) {
        return function(req, res) {
          return req.tx.read();
        };
      })(this));
      app.put("/api/todos/:id", (function(_this) {
        return function(req, res) {
          return req.tx.update();
        };
      })(this));
      app["delete"]("/api/todos/:id", (function(_this) {
        return function(req, res) {
          return req.tx["delete"]();
        };
      })(this));
      app.listen(this.port, appEnv.bind, (function(_this) {
        return function() {
          utils.log("server starting: " + appEnv.url);
          return deferred.resolve(_this);
        };
      })(this));
      return deferred.promise;
    };

    return Server;

  })();

}).call(this);
